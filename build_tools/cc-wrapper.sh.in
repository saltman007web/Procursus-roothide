#!/bin/bash

# Required variables
BUILD_STAGE=@BUILD_STAGE@
BUILD_BASE=@BUILD_BASE@
DEFAULT_ENTITLEMENTS="@BUILD_MISC@/entitlements/general.xml"  # Default entitlements file
DEFAULT_SYSTEM_LIBS=@DEFAULT_SYSTEM_LIBS@ # path to ${MEMO_PREFIX}${MEMO_SUB_PREFIX}/lib
ALT_SYSTEM_LIBS=@ALT_SYSTEM_LIBS@ # path to ${MEMO_PREFIX}${MEMO_SUB_PREFIX}/local/lib

# Cache file for install names
CACHE_FILE="${BUILD_STAGE}/${ACTUAL_PACKAGE}/.install_name_cache"
mkdir -p "${BUILD_STAGE}/${ACTUAL_PACKAGE}"
touch "$CACHE_FILE"

# Parse options to identify an executable
IS_EXECUTABLE=true
OUTPUT_FILE="a.out"  # Default value if -o is not specified
INSTALL_NAME_FLAG=false

# Parse arguments to handle special cases
MODIFIED_ARGS=()
for arg in "$@"; do
    case $arg in
        -c)
            IS_EXECUTABLE=false  # -c flag means it is not an executable
            MODIFIED_ARGS+=("$arg")
            ;;
        -o)
            OUTPUT_FILE_NEXT=true  # Next argument is the output file
            MODIFIED_ARGS+=("$arg")
            ;;
        -install_name)
            INSTALL_NAME_FLAG=true  # Signal that the next argument is the install_name value
            MODIFIED_ARGS+=("$arg")
            ;;
        -Wl,-install_name,*)
            # Handle the -Wl,-install_name,some/path case
            ORIGINAL_INSTALL_NAME="${arg#-Wl,-install_name,}"
            MODIFIED_INSTALL_NAME="@rpath/${ORIGINAL_INSTALL_NAME}"
            echo "${MODIFIED_INSTALL_NAME} ${ORIGINAL_INSTALL_NAME}" >> "$CACHE_FILE"
            MODIFIED_ARGS+=("-Wl,-install_name,${MODIFIED_INSTALL_NAME}")
            ;;
        *)
            if [ "$OUTPUT_FILE_NEXT" = true ]; then
                OUTPUT_FILE="$arg"
                OUTPUT_FILE_NEXT=false
                MODIFIED_ARGS+=("$arg")
            elif [ "$INSTALL_NAME_FLAG" = true ]; then
                # Replace the install_name value with the desired format
                INSTALL_NAME_FLAG=false
                ORIGINAL_INSTALL_NAME="$arg"
                MODIFIED_INSTALL_NAME="@rpath/${arg}"
                echo "${MODIFIED_INSTALL_NAME} ${ORIGINAL_INSTALL_NAME}" >> "$CACHE_FILE"
                MODIFIED_ARGS+=("$MODIFIED_INSTALL_NAME")
            else
                MODIFIED_ARGS+=("$arg")
            fi
            ;;
    esac
done

# Use the actual compiler to compile the code
if ! "clang" "${MODIFIED_ARGS[@]}"; then
    exit 1 # Exit with an error if compilation fails
fi

# Check if the output is an executable and sign it
if [ "$IS_EXECUTABLE" = true ] && [ -x "$OUTPUT_FILE" ]; then
    # Add rpath to the bin to allow it to load package's lib from stage dir
    install_name_tool -add_rpath "${BUILD_STAGE}/${ACTUAL_PACKAGE}" "$OUTPUT_FILE"
    # Add rpath to the bin to allow it to load build_base libs
    install_name_tool -add_rpath "${BUILD_BASE}" "$OUTPUT_FILE"
    # Add rpath to the bin to allow it to load  system libs too
    install_name_tool -add_rpath "${DEFAULT_SYSTEM_LIBS}" "$OUTPUT_FILE"
    install_name_tool -add_rpath "${ALT_SYSTEM_LIBS}" "$OUTPUT_FILE"

    # Make the binaries capable of handling absolute paths
    symredirect "$OUTPUT_FILE" > /dev/null
    install_name_tool -change @loader_path/.jbroot/usr/lib/libvrootapi.dylib @rpath/libvrootapi.dylib "$OUTPUT_FILE"

    # Determine entitlements file to use
    ENTITLEMENTS_FILE="${SIGN_ENTITLEMENTS:-$DEFAULT_ENTITLEMENTS}"

    # Use ldid and fastPathSign for signing
    ldid -S"${ENTITLEMENTS_FILE}" "$OUTPUT_FILE"
    
    # Fast path signing
    /basebin/fastPathSign "$(jbroot $OUTPUT_FILE)"
fi
